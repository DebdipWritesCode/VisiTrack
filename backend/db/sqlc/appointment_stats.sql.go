// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: appointment_stats.sql

package db

import (
	"context"
	"database/sql"
)

const createAppointmentStats = `-- name: CreateAppointmentStats :one
INSERT INTO appointment_stats (
  user_id, total_appointments
) VALUES (
  $1, $2
)
RETURNING user_id, total_appointments
`

type CreateAppointmentStatsParams struct {
	UserID            int32         `json:"user_id"`
	TotalAppointments sql.NullInt32 `json:"total_appointments"`
}

func (q *Queries) CreateAppointmentStats(ctx context.Context, arg CreateAppointmentStatsParams) (AppointmentStat, error) {
	row := q.queryRow(ctx, q.createAppointmentStatsStmt, createAppointmentStats, arg.UserID, arg.TotalAppointments)
	var i AppointmentStat
	err := row.Scan(&i.UserID, &i.TotalAppointments)
	return i, err
}

const decrementAppointmentCount = `-- name: DecrementAppointmentCount :one
UPDATE appointment_stats
SET total_appointments = GREATEST(total_appointments - 1, 0)
WHERE user_id = $1
RETURNING user_id, total_appointments
`

func (q *Queries) DecrementAppointmentCount(ctx context.Context, userID int32) (AppointmentStat, error) {
	row := q.queryRow(ctx, q.decrementAppointmentCountStmt, decrementAppointmentCount, userID)
	var i AppointmentStat
	err := row.Scan(&i.UserID, &i.TotalAppointments)
	return i, err
}

const deleteAppointmentStats = `-- name: DeleteAppointmentStats :exec
DELETE FROM appointment_stats
WHERE user_id = $1
`

func (q *Queries) DeleteAppointmentStats(ctx context.Context, userID int32) error {
	_, err := q.exec(ctx, q.deleteAppointmentStatsStmt, deleteAppointmentStats, userID)
	return err
}

const getAppointmentStatsByUserID = `-- name: GetAppointmentStatsByUserID :one
SELECT user_id, total_appointments FROM appointment_stats
WHERE user_id = $1
`

func (q *Queries) GetAppointmentStatsByUserID(ctx context.Context, userID int32) (AppointmentStat, error) {
	row := q.queryRow(ctx, q.getAppointmentStatsByUserIDStmt, getAppointmentStatsByUserID, userID)
	var i AppointmentStat
	err := row.Scan(&i.UserID, &i.TotalAppointments)
	return i, err
}

const incrementAppointmentCount = `-- name: IncrementAppointmentCount :one
UPDATE appointment_stats
SET total_appointments = total_appointments + 1
WHERE user_id = $1
RETURNING user_id, total_appointments
`

func (q *Queries) IncrementAppointmentCount(ctx context.Context, userID int32) (AppointmentStat, error) {
	row := q.queryRow(ctx, q.incrementAppointmentCountStmt, incrementAppointmentCount, userID)
	var i AppointmentStat
	err := row.Scan(&i.UserID, &i.TotalAppointments)
	return i, err
}

const resetAppointmentCount = `-- name: ResetAppointmentCount :one
UPDATE appointment_stats
SET total_appointments = 0
WHERE user_id = $1
RETURNING user_id, total_appointments
`

func (q *Queries) ResetAppointmentCount(ctx context.Context, userID int32) (AppointmentStat, error) {
	row := q.queryRow(ctx, q.resetAppointmentCountStmt, resetAppointmentCount, userID)
	var i AppointmentStat
	err := row.Scan(&i.UserID, &i.TotalAppointments)
	return i, err
}
