// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: appointment_logs.sql

package db

import (
	"context"
	"database/sql"
)

const createAppointmentLog = `-- name: CreateAppointmentLog :one
INSERT INTO appointment_logs (
  appointment_id, check_in_time, check_out_time
) VALUES (
  $1, $2, $3
)
RETURNING id, appointment_id, check_in_time, check_out_time
`

type CreateAppointmentLogParams struct {
	AppointmentID int32        `json:"appointment_id"`
	CheckInTime   sql.NullTime `json:"check_in_time"`
	CheckOutTime  sql.NullTime `json:"check_out_time"`
}

func (q *Queries) CreateAppointmentLog(ctx context.Context, arg CreateAppointmentLogParams) (AppointmentLog, error) {
	row := q.queryRow(ctx, q.createAppointmentLogStmt, createAppointmentLog, arg.AppointmentID, arg.CheckInTime, arg.CheckOutTime)
	var i AppointmentLog
	err := row.Scan(
		&i.ID,
		&i.AppointmentID,
		&i.CheckInTime,
		&i.CheckOutTime,
	)
	return i, err
}

const deleteAppointmentLog = `-- name: DeleteAppointmentLog :exec
DELETE FROM appointment_logs
WHERE appointment_id = $1
`

func (q *Queries) DeleteAppointmentLog(ctx context.Context, appointmentID int32) error {
	_, err := q.exec(ctx, q.deleteAppointmentLogStmt, deleteAppointmentLog, appointmentID)
	return err
}

const getAppointmentLogByAppointmentID = `-- name: GetAppointmentLogByAppointmentID :one
SELECT id, appointment_id, check_in_time, check_out_time FROM appointment_logs
WHERE appointment_id = $1
`

func (q *Queries) GetAppointmentLogByAppointmentID(ctx context.Context, appointmentID int32) (AppointmentLog, error) {
	row := q.queryRow(ctx, q.getAppointmentLogByAppointmentIDStmt, getAppointmentLogByAppointmentID, appointmentID)
	var i AppointmentLog
	err := row.Scan(
		&i.ID,
		&i.AppointmentID,
		&i.CheckInTime,
		&i.CheckOutTime,
	)
	return i, err
}

const updateCheckInTime = `-- name: UpdateCheckInTime :one
UPDATE appointment_logs
SET check_in_time = $2
WHERE appointment_id = $1
RETURNING id, appointment_id, check_in_time, check_out_time
`

type UpdateCheckInTimeParams struct {
	AppointmentID int32        `json:"appointment_id"`
	CheckInTime   sql.NullTime `json:"check_in_time"`
}

func (q *Queries) UpdateCheckInTime(ctx context.Context, arg UpdateCheckInTimeParams) (AppointmentLog, error) {
	row := q.queryRow(ctx, q.updateCheckInTimeStmt, updateCheckInTime, arg.AppointmentID, arg.CheckInTime)
	var i AppointmentLog
	err := row.Scan(
		&i.ID,
		&i.AppointmentID,
		&i.CheckInTime,
		&i.CheckOutTime,
	)
	return i, err
}

const updateCheckOutTime = `-- name: UpdateCheckOutTime :one
UPDATE appointment_logs
SET check_out_time = $2
WHERE appointment_id = $1
RETURNING id, appointment_id, check_in_time, check_out_time
`

type UpdateCheckOutTimeParams struct {
	AppointmentID int32        `json:"appointment_id"`
	CheckOutTime  sql.NullTime `json:"check_out_time"`
}

func (q *Queries) UpdateCheckOutTime(ctx context.Context, arg UpdateCheckOutTimeParams) (AppointmentLog, error) {
	row := q.queryRow(ctx, q.updateCheckOutTimeStmt, updateCheckOutTime, arg.AppointmentID, arg.CheckOutTime)
	var i AppointmentLog
	err := row.Scan(
		&i.ID,
		&i.AppointmentID,
		&i.CheckInTime,
		&i.CheckOutTime,
	)
	return i, err
}
