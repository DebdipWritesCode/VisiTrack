// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  phone_number, first_name, last_name, role
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, phone_number, first_name, last_name, role, created_at, appointments_hosted, appointments_visited
`

type CreateUserParams struct {
	PhoneNumber string         `json:"phone_number"`
	FirstName   string         `json:"first_name"`
	LastName    string         `json:"last_name"`
	Role        sql.NullString `json:"role"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser,
		arg.PhoneNumber,
		arg.FirstName,
		arg.LastName,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PhoneNumber,
		&i.FirstName,
		&i.LastName,
		&i.Role,
		&i.CreatedAt,
		&i.AppointmentsHosted,
		&i.AppointmentsVisited,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteUserStmt, deleteUser, id)
	return err
}

const getTopPopularUsers = `-- name: GetTopPopularUsers :many
SELECT 
  id, 
  first_name, 
  last_name, 
  phone_number, 
  appointments_hosted, 
  appointments_visited,
  (appointments_hosted + appointments_visited) AS total_appointments,
  role
FROM users
ORDER BY total_appointments DESC
LIMIT 10
`

type GetTopPopularUsersRow struct {
	ID                  int32          `json:"id"`
	FirstName           string         `json:"first_name"`
	LastName            string         `json:"last_name"`
	PhoneNumber         string         `json:"phone_number"`
	AppointmentsHosted  sql.NullInt32  `json:"appointments_hosted"`
	AppointmentsVisited sql.NullInt32  `json:"appointments_visited"`
	TotalAppointments   int32          `json:"total_appointments"`
	Role                sql.NullString `json:"role"`
}

func (q *Queries) GetTopPopularUsers(ctx context.Context) ([]GetTopPopularUsersRow, error) {
	rows, err := q.query(ctx, q.getTopPopularUsersStmt, getTopPopularUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetTopPopularUsersRow{}
	for rows.Next() {
		var i GetTopPopularUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.PhoneNumber,
			&i.AppointmentsHosted,
			&i.AppointmentsVisited,
			&i.TotalAppointments,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTotalAppointmentsHosted = `-- name: GetTotalAppointmentsHosted :one
SELECT appointments_hosted
FROM users
WHERE id = $1
`

func (q *Queries) GetTotalAppointmentsHosted(ctx context.Context, id int32) (sql.NullInt32, error) {
	row := q.queryRow(ctx, q.getTotalAppointmentsHostedStmt, getTotalAppointmentsHosted, id)
	var appointments_hosted sql.NullInt32
	err := row.Scan(&appointments_hosted)
	return appointments_hosted, err
}

const getTotalAppointmentsVisited = `-- name: GetTotalAppointmentsVisited :one
SELECT appointments_visited
FROM users
WHERE id = $1
`

func (q *Queries) GetTotalAppointmentsVisited(ctx context.Context, id int32) (sql.NullInt32, error) {
	row := q.queryRow(ctx, q.getTotalAppointmentsVisitedStmt, getTotalAppointmentsVisited, id)
	var appointments_visited sql.NullInt32
	err := row.Scan(&appointments_visited)
	return appointments_visited, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, phone_number, first_name, last_name, role, created_at, appointments_hosted, appointments_visited FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.queryRow(ctx, q.getUserByIDStmt, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PhoneNumber,
		&i.FirstName,
		&i.LastName,
		&i.Role,
		&i.CreatedAt,
		&i.AppointmentsHosted,
		&i.AppointmentsVisited,
	)
	return i, err
}

const getUserByPhone = `-- name: GetUserByPhone :one
SELECT id, phone_number, first_name, last_name, role, created_at, appointments_hosted, appointments_visited FROM users
WHERE phone_number = $1
`

func (q *Queries) GetUserByPhone(ctx context.Context, phoneNumber string) (User, error) {
	row := q.queryRow(ctx, q.getUserByPhoneStmt, getUserByPhone, phoneNumber)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PhoneNumber,
		&i.FirstName,
		&i.LastName,
		&i.Role,
		&i.CreatedAt,
		&i.AppointmentsHosted,
		&i.AppointmentsVisited,
	)
	return i, err
}

const getUsersByName = `-- name: GetUsersByName :many
SELECT id, phone_number, first_name, last_name, role, created_at, appointments_hosted, appointments_visited FROM users
WHERE LOWER(first_name || ' ' || last_name) LIKE LOWER($1 || '%')
ORDER BY created_at DESC
`

func (q *Queries) GetUsersByName(ctx context.Context, dollar_1 sql.NullString) ([]User, error) {
	rows, err := q.query(ctx, q.getUsersByNameStmt, getUsersByName, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.PhoneNumber,
			&i.FirstName,
			&i.LastName,
			&i.Role,
			&i.CreatedAt,
			&i.AppointmentsHosted,
			&i.AppointmentsVisited,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, phone_number, first_name, last_name, role, created_at, appointments_hosted, appointments_visited FROM users
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.query(ctx, q.listUsersStmt, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.PhoneNumber,
			&i.FirstName,
			&i.LastName,
			&i.Role,
			&i.CreatedAt,
			&i.AppointmentsHosted,
			&i.AppointmentsVisited,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserName = `-- name: UpdateUserName :one
UPDATE users
SET first_name = $2,
    last_name = $3
WHERE id = $1
RETURNING id, phone_number, first_name, last_name, role, created_at, appointments_hosted, appointments_visited
`

type UpdateUserNameParams struct {
	ID        int32  `json:"id"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
}

func (q *Queries) UpdateUserName(ctx context.Context, arg UpdateUserNameParams) (User, error) {
	row := q.queryRow(ctx, q.updateUserNameStmt, updateUserName, arg.ID, arg.FirstName, arg.LastName)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PhoneNumber,
		&i.FirstName,
		&i.LastName,
		&i.Role,
		&i.CreatedAt,
		&i.AppointmentsHosted,
		&i.AppointmentsVisited,
	)
	return i, err
}

const updateUserRole = `-- name: UpdateUserRole :one
UPDATE users
SET role = $2
WHERE id = $1
RETURNING id, phone_number, first_name, last_name, role, created_at, appointments_hosted, appointments_visited
`

type UpdateUserRoleParams struct {
	ID   int32          `json:"id"`
	Role sql.NullString `json:"role"`
}

func (q *Queries) UpdateUserRole(ctx context.Context, arg UpdateUserRoleParams) (User, error) {
	row := q.queryRow(ctx, q.updateUserRoleStmt, updateUserRole, arg.ID, arg.Role)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PhoneNumber,
		&i.FirstName,
		&i.LastName,
		&i.Role,
		&i.CreatedAt,
		&i.AppointmentsHosted,
		&i.AppointmentsVisited,
	)
	return i, err
}
