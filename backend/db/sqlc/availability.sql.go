// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: availability.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createAvailabilitySlot = `-- name: CreateAvailabilitySlot :one
INSERT INTO availability (
  user_id, day_of_week, start_time, end_time, status
) VALUES (
  $1, $2, $3, $4, 'available'
)
RETURNING id, user_id, day_of_week, start_time, end_time, status
`

type CreateAvailabilitySlotParams struct {
	UserID    int32     `json:"user_id"`
	DayOfWeek int32     `json:"day_of_week"`
	StartTime time.Time `json:"start_time"`
	EndTime   time.Time `json:"end_time"`
}

func (q *Queries) CreateAvailabilitySlot(ctx context.Context, arg CreateAvailabilitySlotParams) (Availability, error) {
	row := q.queryRow(ctx, q.createAvailabilitySlotStmt, createAvailabilitySlot,
		arg.UserID,
		arg.DayOfWeek,
		arg.StartTime,
		arg.EndTime,
	)
	var i Availability
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.DayOfWeek,
		&i.StartTime,
		&i.EndTime,
		&i.Status,
	)
	return i, err
}

const deleteAvailabilityByUser = `-- name: DeleteAvailabilityByUser :exec
DELETE FROM availability
WHERE user_id = $1
`

func (q *Queries) DeleteAvailabilityByUser(ctx context.Context, userID int32) error {
	_, err := q.exec(ctx, q.deleteAvailabilityByUserStmt, deleteAvailabilityByUser, userID)
	return err
}

const deleteAvailabilitySlot = `-- name: DeleteAvailabilitySlot :exec
DELETE FROM availability
WHERE user_id = $1
  AND day_of_week = $2
  AND start_time = $3
  AND end_time = $4
`

type DeleteAvailabilitySlotParams struct {
	UserID    int32     `json:"user_id"`
	DayOfWeek int32     `json:"day_of_week"`
	StartTime time.Time `json:"start_time"`
	EndTime   time.Time `json:"end_time"`
}

func (q *Queries) DeleteAvailabilitySlot(ctx context.Context, arg DeleteAvailabilitySlotParams) error {
	_, err := q.exec(ctx, q.deleteAvailabilitySlotStmt, deleteAvailabilitySlot,
		arg.UserID,
		arg.DayOfWeek,
		arg.StartTime,
		arg.EndTime,
	)
	return err
}

const getAvailabilityByUser = `-- name: GetAvailabilityByUser :many
SELECT id, user_id, day_of_week, start_time, end_time, status FROM availability
WHERE user_id = $1
ORDER BY day_of_week, start_time
`

func (q *Queries) GetAvailabilityByUser(ctx context.Context, userID int32) ([]Availability, error) {
	rows, err := q.query(ctx, q.getAvailabilityByUserStmt, getAvailabilityByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Availability{}
	for rows.Next() {
		var i Availability
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.DayOfWeek,
			&i.StartTime,
			&i.EndTime,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAvailabilityStatus = `-- name: UpdateAvailabilityStatus :exec
UPDATE availability
SET status = $5
WHERE user_id = $1
  AND day_of_week = $2
  AND start_time = $3
  AND end_time = $4
`

type UpdateAvailabilityStatusParams struct {
	UserID    int32          `json:"user_id"`
	DayOfWeek int32          `json:"day_of_week"`
	StartTime time.Time      `json:"start_time"`
	EndTime   time.Time      `json:"end_time"`
	Status    sql.NullString `json:"status"`
}

func (q *Queries) UpdateAvailabilityStatus(ctx context.Context, arg UpdateAvailabilityStatusParams) error {
	_, err := q.exec(ctx, q.updateAvailabilityStatusStmt, updateAvailabilityStatus,
		arg.UserID,
		arg.DayOfWeek,
		arg.StartTime,
		arg.EndTime,
		arg.Status,
	)
	return err
}
