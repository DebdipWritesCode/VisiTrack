// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: otps.sql

package db

import (
	"context"
	"database/sql"
)

const createOTP = `-- name: CreateOTP :one
INSERT INTO otps (
  phone_number, otp_code, expires_at
) VALUES (
  $1, $2, $3
)
RETURNING phone_number, otp_code, created_at, expires_at
`

type CreateOTPParams struct {
	PhoneNumber sql.NullString `json:"phone_number"`
	OtpCode     sql.NullString `json:"otp_code"`
	ExpiresAt   sql.NullTime   `json:"expires_at"`
}

func (q *Queries) CreateOTP(ctx context.Context, arg CreateOTPParams) (Otp, error) {
	row := q.queryRow(ctx, q.createOTPStmt, createOTP, arg.PhoneNumber, arg.OtpCode, arg.ExpiresAt)
	var i Otp
	err := row.Scan(
		&i.PhoneNumber,
		&i.OtpCode,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const deleteExpiredOTPs = `-- name: DeleteExpiredOTPs :exec
DELETE FROM otps
WHERE expires_at < NOW()
`

func (q *Queries) DeleteExpiredOTPs(ctx context.Context) error {
	_, err := q.exec(ctx, q.deleteExpiredOTPsStmt, deleteExpiredOTPs)
	return err
}

const deleteOTPByPhone = `-- name: DeleteOTPByPhone :exec
DELETE FROM otps
WHERE phone_number = $1
`

func (q *Queries) DeleteOTPByPhone(ctx context.Context, phoneNumber sql.NullString) error {
	_, err := q.exec(ctx, q.deleteOTPByPhoneStmt, deleteOTPByPhone, phoneNumber)
	return err
}

const getOTPByPhone = `-- name: GetOTPByPhone :one
SELECT phone_number, otp_code, created_at, expires_at FROM otps
WHERE phone_number = $1
ORDER BY created_at DESC
LIMIT 1
`

func (q *Queries) GetOTPByPhone(ctx context.Context, phoneNumber sql.NullString) (Otp, error) {
	row := q.queryRow(ctx, q.getOTPByPhoneStmt, getOTPByPhone, phoneNumber)
	var i Otp
	err := row.Scan(
		&i.PhoneNumber,
		&i.OtpCode,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}
