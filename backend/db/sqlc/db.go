// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.cancelAppointmentStmt, err = db.PrepareContext(ctx, cancelAppointment); err != nil {
		return nil, fmt.Errorf("error preparing query CancelAppointment: %w", err)
	}
	if q.createAppointmentStmt, err = db.PrepareContext(ctx, createAppointment); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAppointment: %w", err)
	}
	if q.createAppointmentLogStmt, err = db.PrepareContext(ctx, createAppointmentLog); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAppointmentLog: %w", err)
	}
	if q.createAppointmentStatsStmt, err = db.PrepareContext(ctx, createAppointmentStats); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAppointmentStats: %w", err)
	}
	if q.createAvailabilitySlotStmt, err = db.PrepareContext(ctx, createAvailabilitySlot); err != nil {
		return nil, fmt.Errorf("error preparing query CreateAvailabilitySlot: %w", err)
	}
	if q.createOTPStmt, err = db.PrepareContext(ctx, createOTP); err != nil {
		return nil, fmt.Errorf("error preparing query CreateOTP: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.decrementAppointmentCountStmt, err = db.PrepareContext(ctx, decrementAppointmentCount); err != nil {
		return nil, fmt.Errorf("error preparing query DecrementAppointmentCount: %w", err)
	}
	if q.deleteAppointmentStmt, err = db.PrepareContext(ctx, deleteAppointment); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAppointment: %w", err)
	}
	if q.deleteAppointmentLogStmt, err = db.PrepareContext(ctx, deleteAppointmentLog); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAppointmentLog: %w", err)
	}
	if q.deleteAppointmentStatsStmt, err = db.PrepareContext(ctx, deleteAppointmentStats); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAppointmentStats: %w", err)
	}
	if q.deleteAvailabilityByUserStmt, err = db.PrepareContext(ctx, deleteAvailabilityByUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAvailabilityByUser: %w", err)
	}
	if q.deleteAvailabilitySlotStmt, err = db.PrepareContext(ctx, deleteAvailabilitySlot); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteAvailabilitySlot: %w", err)
	}
	if q.deleteExpiredOTPsStmt, err = db.PrepareContext(ctx, deleteExpiredOTPs); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteExpiredOTPs: %w", err)
	}
	if q.deleteOTPByPhoneStmt, err = db.PrepareContext(ctx, deleteOTPByPhone); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteOTPByPhone: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.getAppointmentByIDStmt, err = db.PrepareContext(ctx, getAppointmentByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetAppointmentByID: %w", err)
	}
	if q.getAppointmentByQRCodeStmt, err = db.PrepareContext(ctx, getAppointmentByQRCode); err != nil {
		return nil, fmt.Errorf("error preparing query GetAppointmentByQRCode: %w", err)
	}
	if q.getAppointmentLogByAppointmentIDStmt, err = db.PrepareContext(ctx, getAppointmentLogByAppointmentID); err != nil {
		return nil, fmt.Errorf("error preparing query GetAppointmentLogByAppointmentID: %w", err)
	}
	if q.getAppointmentStatsByUserIDStmt, err = db.PrepareContext(ctx, getAppointmentStatsByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query GetAppointmentStatsByUserID: %w", err)
	}
	if q.getAvailabilityByUserStmt, err = db.PrepareContext(ctx, getAvailabilityByUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetAvailabilityByUser: %w", err)
	}
	if q.getOTPByPhoneStmt, err = db.PrepareContext(ctx, getOTPByPhone); err != nil {
		return nil, fmt.Errorf("error preparing query GetOTPByPhone: %w", err)
	}
	if q.getTopPopularUsersStmt, err = db.PrepareContext(ctx, getTopPopularUsers); err != nil {
		return nil, fmt.Errorf("error preparing query GetTopPopularUsers: %w", err)
	}
	if q.getTotalAppointmentsHostedStmt, err = db.PrepareContext(ctx, getTotalAppointmentsHosted); err != nil {
		return nil, fmt.Errorf("error preparing query GetTotalAppointmentsHosted: %w", err)
	}
	if q.getTotalAppointmentsVisitedStmt, err = db.PrepareContext(ctx, getTotalAppointmentsVisited); err != nil {
		return nil, fmt.Errorf("error preparing query GetTotalAppointmentsVisited: %w", err)
	}
	if q.getUserAppointmentStatsStmt, err = db.PrepareContext(ctx, getUserAppointmentStats); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserAppointmentStats: %w", err)
	}
	if q.getUserByIDStmt, err = db.PrepareContext(ctx, getUserByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByID: %w", err)
	}
	if q.getUserByPhoneStmt, err = db.PrepareContext(ctx, getUserByPhone); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByPhone: %w", err)
	}
	if q.getUsersByNameStmt, err = db.PrepareContext(ctx, getUsersByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetUsersByName: %w", err)
	}
	if q.incrementAppointmentCountStmt, err = db.PrepareContext(ctx, incrementAppointmentCount); err != nil {
		return nil, fmt.Errorf("error preparing query IncrementAppointmentCount: %w", err)
	}
	if q.listAppointmentsByDateStmt, err = db.PrepareContext(ctx, listAppointmentsByDate); err != nil {
		return nil, fmt.Errorf("error preparing query ListAppointmentsByDate: %w", err)
	}
	if q.listAppointmentsByHostStmt, err = db.PrepareContext(ctx, listAppointmentsByHost); err != nil {
		return nil, fmt.Errorf("error preparing query ListAppointmentsByHost: %w", err)
	}
	if q.listAppointmentsByVisitorStmt, err = db.PrepareContext(ctx, listAppointmentsByVisitor); err != nil {
		return nil, fmt.Errorf("error preparing query ListAppointmentsByVisitor: %w", err)
	}
	if q.listUsersStmt, err = db.PrepareContext(ctx, listUsers); err != nil {
		return nil, fmt.Errorf("error preparing query ListUsers: %w", err)
	}
	if q.resetAppointmentCountStmt, err = db.PrepareContext(ctx, resetAppointmentCount); err != nil {
		return nil, fmt.Errorf("error preparing query ResetAppointmentCount: %w", err)
	}
	if q.updateAppointmentStatusStmt, err = db.PrepareContext(ctx, updateAppointmentStatus); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAppointmentStatus: %w", err)
	}
	if q.updateAvailabilityStatusStmt, err = db.PrepareContext(ctx, updateAvailabilityStatus); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateAvailabilityStatus: %w", err)
	}
	if q.updateCheckInTimeStmt, err = db.PrepareContext(ctx, updateCheckInTime); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateCheckInTime: %w", err)
	}
	if q.updateCheckOutTimeStmt, err = db.PrepareContext(ctx, updateCheckOutTime); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateCheckOutTime: %w", err)
	}
	if q.updateUserNameStmt, err = db.PrepareContext(ctx, updateUserName); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserName: %w", err)
	}
	if q.updateUserRoleStmt, err = db.PrepareContext(ctx, updateUserRole); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserRole: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.cancelAppointmentStmt != nil {
		if cerr := q.cancelAppointmentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing cancelAppointmentStmt: %w", cerr)
		}
	}
	if q.createAppointmentStmt != nil {
		if cerr := q.createAppointmentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAppointmentStmt: %w", cerr)
		}
	}
	if q.createAppointmentLogStmt != nil {
		if cerr := q.createAppointmentLogStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAppointmentLogStmt: %w", cerr)
		}
	}
	if q.createAppointmentStatsStmt != nil {
		if cerr := q.createAppointmentStatsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAppointmentStatsStmt: %w", cerr)
		}
	}
	if q.createAvailabilitySlotStmt != nil {
		if cerr := q.createAvailabilitySlotStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createAvailabilitySlotStmt: %w", cerr)
		}
	}
	if q.createOTPStmt != nil {
		if cerr := q.createOTPStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createOTPStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.decrementAppointmentCountStmt != nil {
		if cerr := q.decrementAppointmentCountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing decrementAppointmentCountStmt: %w", cerr)
		}
	}
	if q.deleteAppointmentStmt != nil {
		if cerr := q.deleteAppointmentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAppointmentStmt: %w", cerr)
		}
	}
	if q.deleteAppointmentLogStmt != nil {
		if cerr := q.deleteAppointmentLogStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAppointmentLogStmt: %w", cerr)
		}
	}
	if q.deleteAppointmentStatsStmt != nil {
		if cerr := q.deleteAppointmentStatsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAppointmentStatsStmt: %w", cerr)
		}
	}
	if q.deleteAvailabilityByUserStmt != nil {
		if cerr := q.deleteAvailabilityByUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAvailabilityByUserStmt: %w", cerr)
		}
	}
	if q.deleteAvailabilitySlotStmt != nil {
		if cerr := q.deleteAvailabilitySlotStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteAvailabilitySlotStmt: %w", cerr)
		}
	}
	if q.deleteExpiredOTPsStmt != nil {
		if cerr := q.deleteExpiredOTPsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteExpiredOTPsStmt: %w", cerr)
		}
	}
	if q.deleteOTPByPhoneStmt != nil {
		if cerr := q.deleteOTPByPhoneStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteOTPByPhoneStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.getAppointmentByIDStmt != nil {
		if cerr := q.getAppointmentByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAppointmentByIDStmt: %w", cerr)
		}
	}
	if q.getAppointmentByQRCodeStmt != nil {
		if cerr := q.getAppointmentByQRCodeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAppointmentByQRCodeStmt: %w", cerr)
		}
	}
	if q.getAppointmentLogByAppointmentIDStmt != nil {
		if cerr := q.getAppointmentLogByAppointmentIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAppointmentLogByAppointmentIDStmt: %w", cerr)
		}
	}
	if q.getAppointmentStatsByUserIDStmt != nil {
		if cerr := q.getAppointmentStatsByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAppointmentStatsByUserIDStmt: %w", cerr)
		}
	}
	if q.getAvailabilityByUserStmt != nil {
		if cerr := q.getAvailabilityByUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAvailabilityByUserStmt: %w", cerr)
		}
	}
	if q.getOTPByPhoneStmt != nil {
		if cerr := q.getOTPByPhoneStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getOTPByPhoneStmt: %w", cerr)
		}
	}
	if q.getTopPopularUsersStmt != nil {
		if cerr := q.getTopPopularUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTopPopularUsersStmt: %w", cerr)
		}
	}
	if q.getTotalAppointmentsHostedStmt != nil {
		if cerr := q.getTotalAppointmentsHostedStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTotalAppointmentsHostedStmt: %w", cerr)
		}
	}
	if q.getTotalAppointmentsVisitedStmt != nil {
		if cerr := q.getTotalAppointmentsVisitedStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTotalAppointmentsVisitedStmt: %w", cerr)
		}
	}
	if q.getUserAppointmentStatsStmt != nil {
		if cerr := q.getUserAppointmentStatsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserAppointmentStatsStmt: %w", cerr)
		}
	}
	if q.getUserByIDStmt != nil {
		if cerr := q.getUserByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByIDStmt: %w", cerr)
		}
	}
	if q.getUserByPhoneStmt != nil {
		if cerr := q.getUserByPhoneStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByPhoneStmt: %w", cerr)
		}
	}
	if q.getUsersByNameStmt != nil {
		if cerr := q.getUsersByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUsersByNameStmt: %w", cerr)
		}
	}
	if q.incrementAppointmentCountStmt != nil {
		if cerr := q.incrementAppointmentCountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing incrementAppointmentCountStmt: %w", cerr)
		}
	}
	if q.listAppointmentsByDateStmt != nil {
		if cerr := q.listAppointmentsByDateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listAppointmentsByDateStmt: %w", cerr)
		}
	}
	if q.listAppointmentsByHostStmt != nil {
		if cerr := q.listAppointmentsByHostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listAppointmentsByHostStmt: %w", cerr)
		}
	}
	if q.listAppointmentsByVisitorStmt != nil {
		if cerr := q.listAppointmentsByVisitorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listAppointmentsByVisitorStmt: %w", cerr)
		}
	}
	if q.listUsersStmt != nil {
		if cerr := q.listUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUsersStmt: %w", cerr)
		}
	}
	if q.resetAppointmentCountStmt != nil {
		if cerr := q.resetAppointmentCountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing resetAppointmentCountStmt: %w", cerr)
		}
	}
	if q.updateAppointmentStatusStmt != nil {
		if cerr := q.updateAppointmentStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAppointmentStatusStmt: %w", cerr)
		}
	}
	if q.updateAvailabilityStatusStmt != nil {
		if cerr := q.updateAvailabilityStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateAvailabilityStatusStmt: %w", cerr)
		}
	}
	if q.updateCheckInTimeStmt != nil {
		if cerr := q.updateCheckInTimeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateCheckInTimeStmt: %w", cerr)
		}
	}
	if q.updateCheckOutTimeStmt != nil {
		if cerr := q.updateCheckOutTimeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateCheckOutTimeStmt: %w", cerr)
		}
	}
	if q.updateUserNameStmt != nil {
		if cerr := q.updateUserNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserNameStmt: %w", cerr)
		}
	}
	if q.updateUserRoleStmt != nil {
		if cerr := q.updateUserRoleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserRoleStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                   DBTX
	tx                                   *sql.Tx
	cancelAppointmentStmt                *sql.Stmt
	createAppointmentStmt                *sql.Stmt
	createAppointmentLogStmt             *sql.Stmt
	createAppointmentStatsStmt           *sql.Stmt
	createAvailabilitySlotStmt           *sql.Stmt
	createOTPStmt                        *sql.Stmt
	createUserStmt                       *sql.Stmt
	decrementAppointmentCountStmt        *sql.Stmt
	deleteAppointmentStmt                *sql.Stmt
	deleteAppointmentLogStmt             *sql.Stmt
	deleteAppointmentStatsStmt           *sql.Stmt
	deleteAvailabilityByUserStmt         *sql.Stmt
	deleteAvailabilitySlotStmt           *sql.Stmt
	deleteExpiredOTPsStmt                *sql.Stmt
	deleteOTPByPhoneStmt                 *sql.Stmt
	deleteUserStmt                       *sql.Stmt
	getAppointmentByIDStmt               *sql.Stmt
	getAppointmentByQRCodeStmt           *sql.Stmt
	getAppointmentLogByAppointmentIDStmt *sql.Stmt
	getAppointmentStatsByUserIDStmt      *sql.Stmt
	getAvailabilityByUserStmt            *sql.Stmt
	getOTPByPhoneStmt                    *sql.Stmt
	getTopPopularUsersStmt               *sql.Stmt
	getTotalAppointmentsHostedStmt       *sql.Stmt
	getTotalAppointmentsVisitedStmt      *sql.Stmt
	getUserAppointmentStatsStmt          *sql.Stmt
	getUserByIDStmt                      *sql.Stmt
	getUserByPhoneStmt                   *sql.Stmt
	getUsersByNameStmt                   *sql.Stmt
	incrementAppointmentCountStmt        *sql.Stmt
	listAppointmentsByDateStmt           *sql.Stmt
	listAppointmentsByHostStmt           *sql.Stmt
	listAppointmentsByVisitorStmt        *sql.Stmt
	listUsersStmt                        *sql.Stmt
	resetAppointmentCountStmt            *sql.Stmt
	updateAppointmentStatusStmt          *sql.Stmt
	updateAvailabilityStatusStmt         *sql.Stmt
	updateCheckInTimeStmt                *sql.Stmt
	updateCheckOutTimeStmt               *sql.Stmt
	updateUserNameStmt                   *sql.Stmt
	updateUserRoleStmt                   *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                   tx,
		tx:                                   tx,
		cancelAppointmentStmt:                q.cancelAppointmentStmt,
		createAppointmentStmt:                q.createAppointmentStmt,
		createAppointmentLogStmt:             q.createAppointmentLogStmt,
		createAppointmentStatsStmt:           q.createAppointmentStatsStmt,
		createAvailabilitySlotStmt:           q.createAvailabilitySlotStmt,
		createOTPStmt:                        q.createOTPStmt,
		createUserStmt:                       q.createUserStmt,
		decrementAppointmentCountStmt:        q.decrementAppointmentCountStmt,
		deleteAppointmentStmt:                q.deleteAppointmentStmt,
		deleteAppointmentLogStmt:             q.deleteAppointmentLogStmt,
		deleteAppointmentStatsStmt:           q.deleteAppointmentStatsStmt,
		deleteAvailabilityByUserStmt:         q.deleteAvailabilityByUserStmt,
		deleteAvailabilitySlotStmt:           q.deleteAvailabilitySlotStmt,
		deleteExpiredOTPsStmt:                q.deleteExpiredOTPsStmt,
		deleteOTPByPhoneStmt:                 q.deleteOTPByPhoneStmt,
		deleteUserStmt:                       q.deleteUserStmt,
		getAppointmentByIDStmt:               q.getAppointmentByIDStmt,
		getAppointmentByQRCodeStmt:           q.getAppointmentByQRCodeStmt,
		getAppointmentLogByAppointmentIDStmt: q.getAppointmentLogByAppointmentIDStmt,
		getAppointmentStatsByUserIDStmt:      q.getAppointmentStatsByUserIDStmt,
		getAvailabilityByUserStmt:            q.getAvailabilityByUserStmt,
		getOTPByPhoneStmt:                    q.getOTPByPhoneStmt,
		getTopPopularUsersStmt:               q.getTopPopularUsersStmt,
		getTotalAppointmentsHostedStmt:       q.getTotalAppointmentsHostedStmt,
		getTotalAppointmentsVisitedStmt:      q.getTotalAppointmentsVisitedStmt,
		getUserAppointmentStatsStmt:          q.getUserAppointmentStatsStmt,
		getUserByIDStmt:                      q.getUserByIDStmt,
		getUserByPhoneStmt:                   q.getUserByPhoneStmt,
		getUsersByNameStmt:                   q.getUsersByNameStmt,
		incrementAppointmentCountStmt:        q.incrementAppointmentCountStmt,
		listAppointmentsByDateStmt:           q.listAppointmentsByDateStmt,
		listAppointmentsByHostStmt:           q.listAppointmentsByHostStmt,
		listAppointmentsByVisitorStmt:        q.listAppointmentsByVisitorStmt,
		listUsersStmt:                        q.listUsersStmt,
		resetAppointmentCountStmt:            q.resetAppointmentCountStmt,
		updateAppointmentStatusStmt:          q.updateAppointmentStatusStmt,
		updateAvailabilityStatusStmt:         q.updateAvailabilityStatusStmt,
		updateCheckInTimeStmt:                q.updateCheckInTimeStmt,
		updateCheckOutTimeStmt:               q.updateCheckOutTimeStmt,
		updateUserNameStmt:                   q.updateUserNameStmt,
		updateUserRoleStmt:                   q.updateUserRoleStmt,
	}
}
